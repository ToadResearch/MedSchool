# flow:
#   db (Postgres) becomes healthy.
#   hapi waits for db → becomes healthy.
#   validator (HL7 validator-wrapper) waits for hapi → starts.
#   gateway (NGINX) waits for both hapi and validator → starts.
#   uploader waits for hapi → runs one-shot to load data (optional).
#   mcp waits for hapi → becomes healthy.
#   sandbox waits for mcp → becomes healthy.
#   prewarm waits for validator → runs one-shot to prewarm the validator.

version: "3.9"

services:

  gateway:
    image: nginx:1.28.0
    container_name: medschool-gateway
    restart: unless-stopped
    ports:
      # This is now the single public entry point for the FHIR API
      - "${HAPI_PORT}:80"
    environment:
      # This secret is passed to Nginx and then to the njs script for validation
      JWT_SHARED_SECRET: ${JWT_SHARED_SECRET}
    volumes:
      # Mount the Nginx configs as read-only
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/scripts/jwt.js:/etc/nginx/scripts/jwt.js:ro
      # Template that bakes the JWT secret into a conf file via envsubst
      - ./docker/nginx/templates/jwt_secret.conf.template:/etc/nginx/templates/jwt_secret.conf.template:ro
    networks:
      - medschool-net
    depends_on:
      hapi:
        condition: service_healthy 
      validator:
        condition: service_healthy

  db:
    image: postgres:15
    container_name: medschool-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 30
    volumes:
      # data persists in this volume
      - pgdata:/var/lib/postgresql/data
    networks:
      - medschool-net
    # ports:
    #   # only open port during testing
    #   - "${DB_PORT}:5432"

  hapi:
    mem_limit: 6g # compose (non-swarm) memory limit for this container
    build:
      context: ./docker/fhir_server
    container_name: medschool-hapi
    depends_on:
      db:
        # hapi will wait until db is ready before starting
        condition: service_healthy 
    restart: unless-stopped
    # ports:
    #   - "8081:8080" #"${HAPI_PORT}:8080" # port closed now, use nginx gateway port instead
    environment:
      # initial heap of 2GiB and max of 4GiB, exits onOOM
      # JAVA_TOOL_OPTIONS: "-Xms2g -Xmx4g -XX:+ExitOnOutOfMemoryError"
      # initial heap of 50% and max of 70% of the container's memory, exits on OOM
      JAVA_TOOL_OPTIONS: "-XX:InitialRAMPercentage=50 -XX:MaxRAMPercentage=70 -XX:+ExitOnOutOfMemoryError"
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGDATABASE: ${PGDATABASE}
      # - spring.jpa.properties.hibernate.dialect=ca.uhn.fhir.jpa.model.dialect.PostgresDialect
      # - spring.jpa.properties.hibernate.dialect=ca.uhn.fhir.jpa.model.dialect.Postgres94Dialect
      # - spring.datasource.url=jdbc:postgresql://postgres:5432/fhir
      # local config file path for hapi to load from
      
      # replaces the default config file location -- must be correct path -- fails :(
      # SPRING_CONFIG_LOCATION: "file:/app/config/application.yaml" # 
      
      # adds additional search locations for the application.yaml file -- works :)
      SPRING_CONFIG_ADDITIONAL_LOCATION: "file:/app/config/"  
      JWT_SHARED_SECRET: ${JWT_SHARED_SECRET}
    volumes:
      # inject local config file into container (local file path and container path), ro for read only
      - ./docker/fhir_server/config/application.yaml:/app/config/application.yaml:ro
      # Optional but useful if you enable Lucene later and bulk export
      # - hapi_appdata:/app/target
    healthcheck:
      # once the metadata is available, we know the server is running
      # busybox wget added to the hapi image in Dockerfile for healthcheck
      test: ["CMD", "/busybox", "wget", "-q", "--spider", "http://localhost:8080/fhir/metadata"]
    
      interval: 5s
      timeout: 5s
      retries: 40
    networks:
      - medschool-net

  validator:
    build:
      context: ./docker/val_server
    container_name: medschool-fhir-validator
    restart: unless-stopped
    environment:
      # Optional: tweak/disable prewarm without rebuilding
      - TX_SERVER_URL=${TX_SERVER_URL:-https://tx.fhir.org}
      - VALIDATOR_PREWARM=${VALIDATOR_PREWARM:-true}
      - VALIDATOR_PREWARM_SV=${VALIDATOR_PREWARM_SV:-4.0.1}
      - VALIDATOR_PREWARM_TIMEOUT=${VALIDATOR_PREWARM_TIMEOUT:-90}
      - VALIDATOR_STARTUP_WAIT=${VALIDATOR_STARTUP_WAIT:-30}
    networks:
      - medschool-net
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:3500/versions >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
    depends_on:
      hapi:
        # because we need validator to download some fhir stuff via prewarm
        # we'll just wait for hapi to have started so everything happens in parallel
        condition: service_started

  # One-shot job that warms the validator after it's healthy
  validator-prewarm:
    image: curlimages/curl:8.8.0
    container_name: medschool-validator-prewarm
    depends_on:
      validator:
        condition: service_started
    command: ["sh", "-eux", "/scripts/prewarm.sh"]
    environment:
      VALIDATOR_HOST: validator
      VALIDATOR_PORT: "3500"
      VALIDATOR_SV: "4.0.1"
      PREWARM_TIMEOUT_SECS: "180"
    volumes:
      - ./docker/val_server/scripts/prewarm.sh:/scripts/prewarm.sh:ro
    networks: [medschool-net]
    restart: "no"


  sandbox:
    build:
      context: ./docker/sandbox
    image: medschool-sandbox
    container_name: medschool-sandbox
    restart: unless-stopped
    environment:
      SANDBOX_IMAGE: "medschool-sandbox"
      # Optional: enable gVisor if installed on the host: SANDBOX_RUNTIME=runsc
      # SANDBOX_RUNTIME: "runsc"
    networks: [medschool-net]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "${SANDBOX_PORT:-8088}:8088"
    depends_on:
      mcp:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8088/healthz >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30


  uploader:
    build:
      context: ./docker/uploader
    container_name: medschool-uploader
    depends_on:
      # uploader will wait until hapi is ready before starting
      # because the hapi server needs to be up before uploading anything!
      hapi:
        condition: service_healthy
    environment:
      FHIR_BASE_URL: "http://hapi:8080/fhir" # direct internal link to hapi server
      SYNTHEA_ZIP_URL: ${SYNTHEA_ZIP_URL}
    networks:
      - medschool-net
    restart: "no"


  mcp:
    build:
      context: ./docker/mcp_server
    container_name: medschool-mcp
    restart: unless-stopped
    depends_on:
      hapi:
        condition: service_healthy
    environment:
      MCP_PORT: ${MCP_PORT}
      MCP_HOST: ${MCP_HOST}
      MCP_HTTP_PATH: ${MCP_HTTP_PATH}
      FHIR_BEARER_TOKEN: ${FHIR_BEARER_TOKEN} # TODO: potentially remove this, have the client provide it, like in mcp.json
      FHIR_BASE_URL: "http://gateway/fhir"
      PYEXEC_EXECUTOR_URL: "${MCP_PYEXEC_EXECUTOR_URL:-http://sandbox:8088}"
    networks:
      - medschool-net
    healthcheck:
      # use python since the base image is python:3.11-slim
      test: ["CMD", "python", "-c", "import urllib.request,sys; urllib.request.urlopen('http://localhost:8000/health'); sys.exit(0)"]
      interval: 5s
      timeout: 5s
      retries: 40
    ports:
      - "${MCP_PORT:-8000}:${MCP_PORT:-8000}"

networks:
  medschool-net:

volumes:
  pgdata:
  # hapi_appdata:
# MedSchool/docker/nginx/default.conf

server {
    listen 80;
    server_name localhost;

    # Allow unauthenticated access ONLY to the server's capability statement.
    location = /fhir/metadata {
        proxy_pass http://hapi:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Internal location for the JWT validation sub-request.
    location = /_validate_jwt {
        internal;
        # Propagate Authorization header to the njs handler via variable
        proxy_set_header Authorization $auth_header;
        js_content jwt.verify; # Calls the 'verify' function from our jwt.js
    }

    # Custom response for unauthorized requests.
    location @unauthorized {
        return 401 '{"error": "Unauthorized", "message": "A valid JWT Bearer token is required."}\n';
    }

    # --- START: SECURE ROUTING BLOCK ---

    # Protect the FHIR API endpoint.
    location /fhir/ {
        # 1) JWT gate
        auth_request /_validate_jwt;
        error_page 401 = @unauthorized;

        # 2) proxy straight through without rewriting the URI
        proxy_pass http://hapi:8080;          # ← no trailing slash, no rewrite

        # 3) make sure the request body survives the hop
        proxy_set_header Content-Type   $content_type;
        proxy_set_header Content-Length $content_length;
        proxy_http_version 1.1;              # allow chunked uploads
        proxy_set_header Connection "";

        # 4) usual X-headers
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # (Optional) FHIR operations can sometimes be slow; modestly extend timeouts
        proxy_read_timeout 180s;
        proxy_send_timeout 180s;
        send_timeout 180s;
        client_body_timeout 180s;
        proxy_connect_timeout 60s;
    }

    # ─────────────────────────────────────────────────────────────────────
    # HL7 validator-wrapper behind the same JWT gate
    #
    # NGINX REWRITE RULE OF THUMB:
    # - proxy_pass WITH a trailing slash → replace the matched prefix.
    # - proxy_pass WITHOUT a trailing slash → preserve the incoming URI.
    #
    # Uniform gateway contract:
    #   All validator endpoints are exposed at:  /validator/<endpoint>
    #
    # Mapping to upstream container:
    #   • /validator/validate   → upstream /validate   (strip prefix)
    #   • /validator/versions   → upstream /versions   (strip prefix)
    #   • /validator/ig         → upstream /ig         (strip prefix)
    #   • /validator/igVersions → upstream /igVersions (strip prefix)
    #   • /validator/terminology→ upstream /terminology(strip prefix)
    #   • /validator/txStatus   → upstream /txStatus   (strip prefix)
    #   • /validator/packStatus → upstream /packStatus (strip prefix)
    #   • /validator/version    → upstream /validator/version  (PRESERVE path)
    #
    # NOTE: We intentionally do NOT expose validator routes at gateway root
    # (e.g., /versions) to keep the surface clearly namespaced under /validator/.
    # ─────────────────────────────────────────────────────────────────────

    # /validator/version is the only endpoint in the validation server that 
    # has the /validator/ prefix, so we need to gate and preserve it. it should
    # not be stripped like all the others because the validation server accepts it as is
    location = /validator/version {
        auth_request /_validate_jwt;
        error_page 401 = @unauthorized;

        # No trailing slash → upstream sees /validator/version unchanged
        proxy_pass http://validator:3500;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Version call is quick; default timeouts are fine
    }

    # we want all the validator server endpoints to be behind the same
    # /validator/ prefix. so we accept them this way, and then strip the 
    # /validator/ prefix off and send them to the validator server because
    # the validator server doesn't have a /validator/ prefix.
    # (e.g., /validator/validate → /validate, /validator/txStatus → /txStatus)
    location /validator/ {
        auth_request /_validate_jwt;
        error_page 401 = @unauthorized;

        # Trailing slash intentionally strips the /validator prefix.
        proxy_pass http://validator:3500/;

        proxy_http_version 1.1;
        proxy_set_header Connection "";

        # ⚠️ For multipart/form-data uploads: do NOT override Content-Type/Length.
        # Let NGINX forward the client's headers untouched (boundary intact).
        # proxy_set_header Content-Type   $content_type;
        # proxy_set_header Content-Length $content_length;

        # X-headers
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # ----- IMPORTANT: validator jobs can be slow on cold cache -----
        # Increase timeouts so the gateway doesn't 504 while the validator
        # is fetching packages / building context.
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        send_timeout 300s;
        client_body_timeout 300s;
        proxy_connect_timeout 60s;

        # Optional: for large uploads or streaming behavior
        # proxy_request_buffering off;
        # proxy_buffering off;
    }

    # --- END: SECURE ROUTING BLOCK ---

    # Catch-all
    location / {
        return 404 '{"error": "Not Found"}\n';
    }
}

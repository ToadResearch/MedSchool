user  nginx;
worker_processes  auto;

# Load the njs module for the JWT verifier
load_module /usr/lib/nginx/modules/ngx_http_js_module.so;

# Expose the shared secret from the container's environment to Nginx and njs
env JWT_SHARED_SECRET;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Include rendered templates from /etc/nginx/templates/*.template via envsubst
    # (Provides $jwt_secret_baked map used by jwt.js)
    include /etc/nginx/conf.d/jwt_secret.conf;

    # Make the incoming Authorization header available as $auth_header
    # for subrequests (auth_request) and njs handlers.
    map $http_authorization $auth_header {
        default $http_authorization;
    }

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Import the verify function from our jwt.js script so it's available
    # to all server blocks included below.
    js_import jwt from /etc/nginx/scripts/jwt.js;

    # Expose the JWT secret as an nginx variable using njs so it's accessible
    # from request context via r.variables.jwt_shared_secret (guarded in code).
    js_set $jwt_shared_secret jwt.get_secret;

    # Include all virtual host configurations from the conf.d directory
    # NOTE: We include this ONCE (previous duplicate include removed).
    include /etc/nginx/conf.d/*.conf;
}
